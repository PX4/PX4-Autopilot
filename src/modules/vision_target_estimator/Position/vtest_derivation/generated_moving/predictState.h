// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym
{

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: predictState
 *
 * Args:
 *     dt: Scalar
 *     state: Matrix51
 *     acc: Scalar
 *
 * Outputs:
 *     predict_state: Matrix51
 */
template <typename Scalar>
void Predictstate(const Scalar dt, const matrix::Matrix<Scalar, 5, 1> &state, const Scalar acc,
		  matrix::Matrix<Scalar, 5, 1> *const predict_state = nullptr)
{
	// Total ops: 15

	// Input arrays

	// Intermediate terms (1)
	const Scalar _tmp0 = std::pow(dt, Scalar(2));

	// Output terms (1)
	if (predict_state != nullptr) {
		matrix::Matrix<Scalar, 5, 1> &_predict_state = (*predict_state);

		_predict_state(0, 0) = -Scalar(0.5) * _tmp0 * acc + Scalar(0.5) * _tmp0 * state(3, 0) -
				       dt * state(1, 0) + dt * state(4, 0) + state(0, 0);
		_predict_state(1, 0) = acc * dt + state(1, 0);
		_predict_state(2, 0) = state(2, 0);
		_predict_state(3, 0) = state(3, 0);
		_predict_state(4, 0) = dt * state(3, 0) + state(4, 0);
	}
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
