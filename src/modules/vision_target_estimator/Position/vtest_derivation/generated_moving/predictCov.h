// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym
{

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: predictCov
 *
 * Args:
 *     dt: Scalar
 *     input_var: Scalar
 *     bias_var: Scalar
 *     acc_var: Scalar
 *     covariance: Matrix55
 *
 * Outputs:
 *     cov_updated: Matrix55
 */
template <typename Scalar>
void Predictcov(const Scalar dt, const Scalar input_var, const Scalar bias_var,
		const Scalar acc_var, const matrix::Matrix<Scalar, 5, 5> &covariance,
		matrix::Matrix<Scalar, 5, 5> *const cov_updated = nullptr)
{
	// Total ops: 90

	// Input arrays

	// Intermediate terms (16)
	const Scalar _tmp0 = covariance(1, 4) * dt;
	const Scalar _tmp1 = std::pow(dt, Scalar(2));
	const Scalar _tmp2 = Scalar(0.5) * _tmp1;
	const Scalar _tmp3 = -_tmp0 + _tmp2 * covariance(3, 4) + covariance(0, 4) + covariance(4, 4) * dt;
	const Scalar _tmp4 = -covariance(1, 1) * dt;
	const Scalar _tmp5 = _tmp2 * covariance(3, 1) + _tmp4 + covariance(0, 1) + covariance(4, 1) * dt;
	const Scalar _tmp6 = covariance(1, 3) * dt;
	const Scalar _tmp7 = _tmp2 * covariance(3, 3);
	const Scalar _tmp8 = -_tmp6 + _tmp7 + covariance(0, 3) + covariance(4, 3) * dt;
	const Scalar _tmp9 = -Scalar(0.5) * [&]() {
		const Scalar base = dt;
		return base * base * base;
	}() * input_var;
	const Scalar _tmp10 = covariance(3, 4) * dt;
	const Scalar _tmp11 = covariance(3, 1) * dt;
	const Scalar _tmp12 = covariance(3, 3) * dt;
	const Scalar _tmp13 = _tmp12 + covariance(4, 3);
	const Scalar _tmp14 = _tmp10 + covariance(4, 4);
	const Scalar _tmp15 = _tmp11 + covariance(4, 1);

	// Output terms (1)
	if (cov_updated != nullptr) {
		matrix::Matrix<Scalar, 5, 5> &_cov_updated = (*cov_updated);

		_cov_updated(0, 0) = _tmp2 * _tmp8 + _tmp2 * covariance(3, 0) + _tmp3 * dt - _tmp5 * dt +
				     covariance(0, 0) - covariance(1, 0) * dt + covariance(4, 0) * dt +
				     Scalar(0.25) * std::pow(dt, Scalar(4)) * input_var;
		_cov_updated(1, 0) = _tmp0 + _tmp2 * covariance(1, 3) + _tmp4 + _tmp9 + covariance(1, 0);
		_cov_updated(2, 0) =
			_tmp2 * covariance(2, 3) + covariance(2, 0) - covariance(2, 1) * dt + covariance(2, 4) * dt;
		_cov_updated(3, 0) = _tmp10 - _tmp11 + _tmp7 + covariance(3, 0);
		_cov_updated(4, 0) =
			_tmp13 * _tmp2 + _tmp14 * dt - _tmp15 * dt + covariance(3, 0) * dt + covariance(4, 0);
		_cov_updated(0, 1) = _tmp5 + _tmp9;
		_cov_updated(1, 1) = _tmp1 * input_var + covariance(1, 1);
		_cov_updated(2, 1) = covariance(2, 1);
		_cov_updated(3, 1) = covariance(3, 1);
		_cov_updated(4, 1) = _tmp15;
		_cov_updated(0, 2) =
			_tmp2 * covariance(3, 2) + covariance(0, 2) - covariance(1, 2) * dt + covariance(4, 2) * dt;
		_cov_updated(1, 2) = covariance(1, 2);
		_cov_updated(2, 2) = bias_var + covariance(2, 2);
		_cov_updated(3, 2) = covariance(3, 2);
		_cov_updated(4, 2) = covariance(3, 2) * dt + covariance(4, 2);
		_cov_updated(0, 3) = _tmp8;
		_cov_updated(1, 3) = covariance(1, 3);
		_cov_updated(2, 3) = covariance(2, 3);
		_cov_updated(3, 3) = acc_var + covariance(3, 3);
		_cov_updated(4, 3) = _tmp13;
		_cov_updated(0, 4) = _tmp3 + _tmp8 * dt;
		_cov_updated(1, 4) = _tmp6 + covariance(1, 4);
		_cov_updated(2, 4) = covariance(2, 3) * dt + covariance(2, 4);
		_cov_updated(3, 4) = _tmp12 + covariance(3, 4);
		_cov_updated(4, 4) = _tmp13 * dt + _tmp14;
	}
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
