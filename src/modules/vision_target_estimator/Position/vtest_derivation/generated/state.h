// --------------------------------------------------
// This file was autogenerated, do NOT modify by hand
// --------------------------------------------------

#ifndef EKF_STATE_H
#define EKF_STATE_H

#include <matrix/math.hpp>

namespace vtest
{
struct StateSample {
	float pos_rel{};
	float vel_uav{};
	float bias{};

	matrix::Vector<float, 3> Data() const
	{
		matrix::Vector<float, 3> state;
		state.slice<1, 1>(0, 0) = pos_rel;
		state.slice<1, 1>(1, 0) = vel_uav;
		state.slice<1, 1>(2, 0) = bias;
		return state;
	};

	const matrix::Vector<float, 3> &vector() const
	{
		return *reinterpret_cast<matrix::Vector<float, 3>*>(const_cast<float *>(reinterpret_cast<const float *>(&pos_rel)));
	};

};
static_assert(sizeof(matrix::Vector<float, 3>) == sizeof(StateSample), "state vector doesn't match StateSample size");
namespace Axis
{
static constexpr uint8_t x{0};
static constexpr uint8_t y{1};
static constexpr uint8_t z{2};
static constexpr uint8_t size{3};
};

namespace State
{
static constexpr uint8_t pos_rel{0};
static constexpr uint8_t vel_uav{1};
static constexpr uint8_t bias{2};
static constexpr uint8_t size{3};
};
}
#endif // !EKF_STATE_H
