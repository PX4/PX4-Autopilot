// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym
{

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: predictCov
 *
 * Args:
 *     dt: Scalar
 *     input_var: Scalar
 *     bias_var: Scalar
 *     acc_var: Scalar
 *     covariance: Matrix33
 *
 * Outputs:
 *     cov_updated: Matrix33
 */
template <typename Scalar>
void Predictcov(const Scalar dt, const Scalar input_var, const Scalar bias_var,
		const Scalar acc_var, const matrix::Matrix<Scalar, 3, 3> &covariance,
		matrix::Matrix<Scalar, 3, 3> *const cov_updated = nullptr)
{
	// Total ops: 26

	// Unused inputs
	(void)acc_var;

	// Input arrays

	// Intermediate terms (3)
	const Scalar _tmp0 = -covariance(1, 1) * dt;
	const Scalar _tmp1 = _tmp0 + covariance(0, 1);
	const Scalar _tmp2 = -Scalar(0.5) * [&]() {
		const Scalar base = dt;
		return base * base * base;
	}() * input_var;

	// Output terms (1)
	if (cov_updated != nullptr) {
		matrix::Matrix<Scalar, 3, 3> &_cov_updated = (*cov_updated);

		_cov_updated(0, 0) = -_tmp1 * dt + covariance(0, 0) - covariance(1, 0) * dt +
				     Scalar(0.25) * std::pow(dt, Scalar(4)) * input_var;
		_cov_updated(1, 0) = _tmp0 + _tmp2 + covariance(1, 0);
		_cov_updated(2, 0) = covariance(2, 0) - covariance(2, 1) * dt;
		_cov_updated(0, 1) = _tmp1 + _tmp2;
		_cov_updated(1, 1) = covariance(1, 1) + std::pow(dt, Scalar(2)) * input_var;
		_cov_updated(2, 1) = covariance(2, 1);
		_cov_updated(0, 2) = covariance(0, 2) - covariance(1, 2) * dt;
		_cov_updated(1, 2) = covariance(1, 2);
		_cov_updated(2, 2) = bias_var + covariance(2, 2);
	}
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
